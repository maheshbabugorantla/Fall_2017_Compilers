;STRINGeol:="\n";STRINGstar:="*";STRINGplus:="+";STRINGequal:="=";
; IR code
;FLOATa,b,c;
;only one function call with operation: or no function callarg1
;Print store: c $2 left: $-1
;only one function call with operation: or no function callarg2
;Print store: c $3 left: $-2
;only one function call with operation: or no function calla+b
;Print store: c !T1 left: $-3
;FLOATa,b,multiplyresult;
;only one function call with operation: or no function call2.0
;Print store: c 2.0 left: !T2
;Print store: c !T2 left: $-1
;only one function call with operation: or no function call3.0
;Print store: c 3.0 left: !T3
;Print store: c !T3 left: $-2
;=======================
;Left: multiplyresult right: myFunction(a,b) postfix: !T4
;current register = !T4 current call myFunction(a,b)
;Function name = myFunction
;Function parameters = a b
;name: multiplyresult;-----------------------; PUSH
; JSR FUNC_id_main_L
; HALT
; LABEL FUNC_id_myFunction_L
; LINK 4
; STOREF $2 $-1
; STOREF $3 $-2
; ADDF $-1 $-2 !T1
; STOREF !T1 $-3
; STOREF $-3 $4
; UNLINK
; RET
; LABEL FUNC_id_main_L
; LINK 4
; STOREF 2.0 !T2
; STOREF !T2 $-1
; STOREF 3.0 !T3
; STOREF !T3 $-2
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; PUSH $-1
; PUSH $-2
; JSR FUNC_id_myFunction_L
; POP
; POP
; POP !T4
; STOREF !T4 $-3
; POP r3
; POP r2
; POP r1
; POP r0
; WRITEF $-3
; WRITES eol
; STOREI 0 !T5
; STOREI !T5 $2
; UNLINK
; RET
str eol "\n"
str star "*"
str plus "+"
str equal "="
var a
var b
var c
var a
var b
var multiplyresult
push
jsr FUNC_id_main_L
sys halt
label FUNC_id_myFunction_L
link 10
;$2 $-1 false false
move $2 r0
move r0 $-1
;$3 $-2 false false
move $3 r0
move r0 $-2
; handled?
move $-1 r0
; handled2?
move $-2 r1
addi r0 r1
move r1 $-4 ; + STORE_HANDLED
;$-4 $-3 false false
move $-4 r0
move r0 $-3
;$-3 $4 false false
move $-3 r0
move r0 $4
unlnk
ret
label FUNC_id_main_L
link 10
;2.0 $-4 false false
move 2.0 $-4
;$-4 $-1 false false
move $-4 r0
move r0 $-1
;3.0 $-6 false false
move 3.0 $-6
;$-6 $-2 false false
move $-6 r0
move r0 $-2
push r0
push r1
push r2
push r3
push ;(return value)
push $-1
push $-2
jsr FUNC_id_myFunction_L
pop
pop
pop $-8 ;using temp
;$-8 $-3 false false
move $-8 r0
move r0 $-3
pop r3
pop r2
pop r1
pop r0
sys writer $-3
sys writes eol
;0 $-10 false false
move 0 $-10
;$-10 $2 false false
move $-10 r0
move r0 $2
unlnk
ret
