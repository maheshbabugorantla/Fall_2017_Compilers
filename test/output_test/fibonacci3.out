; PUSH SYMBOLSTRINGinput:="Please input an integer number: ";STRINGspace:=" ";STRINGeol:="\n";
; IR code
; PUSH SYMBOLINTret1;
;Print store: c 2 left: !T1
;found: F(n-2)
;postfix2: !T2
;number rec before: 2
;number rec after: 3
;Key: !T2 call: F(n-2)
;left: ret1 right: F(n-2) true
;number before: 3 number after: 4
;=======================
;current register = !T3 current call F(n-2)
;Function name = F
;Function parameters = n-2
; Postfix: n 2 -
;-----------------------
;Return Statement is Function Call F(n-1)+ret1+1 3;=======================
;current register = !T6 current call F(n-1)
;Function name = F
;Function parameters = n-1
; Postfix: n 1 -
;-----------------------
;Print store: c !T12 left: $3
;Print store: c 0 left: !T13
;RETURN: No Function;Print store: c 1 left: !T15
;RETURN: No Function;RETURN: No Function; PUSH SYMBOLINTi,end,result;
; PUSH SYMBOL
;Print store: c 0 left: !T18
;Print store: c !T18 left: $-3
;Print store: c $-2 left: !T19
;found: F(i)
;postfix2: !T20
;number rec before: 20
;number rec after: 21
;Key: !T2 call: F(n-2)
;Key: !T20 call: F(i)
;Key: !T3 call: F(n-2)
;Key: !T6 call: F(n-1)
;left: result right: F(i) true
;number before: 21 number after: 22
;=======================
;current register = !T21 current call F(i)
;Function name = F
;Function parameters = i
; Postfix: i
;Error here: i
;-----------------------
;Print store: c !T23 left: $-3
;RETURN: No Function; PUSH
; JSR FUNC_id_main_L
; HALT
; LABEL FUNC_id_F_L
; LINK 2
; STOREI 2 !T1
; LE $2 !T1 label1
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; STOREI 2 !T3
; SUBI $2 !T3 !T4
; PUSH !T4
; JSR FUNC_id_F_L
; POP
; POP !T5
; STOREI !T5 !T3
; POP r3
; POP r2
; POP r1
; POP r0
; STOREI !T3 !T3 ;snemo
; STOREI !T3 $-1
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; STOREI 1 !T7
; SUBI $2 !T7 !T8
; PUSH !T8
; JSR FUNC_id_F_L
; POP
; POP !T9
; STOREI !T9 !T6
; POP r3
; POP r2
; POP r1
; POP r0
; STOREI !T6 !T6 ;snemo
; ADDI !T6 $-1 !T10
; STOREI 1 !T11
; ADDI !T10 !T11 !T12
; STOREI !T12 $3
; UNLINK
; RET
; JUMP label2
; LABEL label1
; STOREI 0 !T13
; NE $2 !T13 label3
; STOREI 0 !T14
; STOREI !T14 $3
; UNLINK
; RET
; JUMP label4
; LABEL label3
; STOREI 1 !T15
; NE $2 !T15 label5
; STOREI 1 !T16
; STOREI !T16 $3
; UNLINK
; RET
; JUMP label6
; LABEL label5
; STOREI 1 !T17
; STOREI !T17 $3
; UNLINK
; RET
; LABEL label6
; LABEL label4
; LABEL label2
; UNLINK
; RET
; LABEL FUNC_id_main_L
; LINK 4
; WRITES input
; READI $-2
; STOREI 0 !T18
; STOREI !T18 $-3
; LABEL label7
; STOREI $-2 !T19
; EQ $-3 !T19 label8
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; PUSH $-3
; JSR FUNC_id_F_L
; POP
; POP !T21
; STOREI !T21 !T21
; POP r3
; POP r2
; POP r1
; POP r0
; STOREI !T21 !T21 ;snemo
; STOREI !T21 $-1
; WRITEI $-3
; WRITES space
; WRITEI $-1
; WRITES eol
; STOREI 1 !T22
; ADDI $-3 !T22 !T23
; STOREI !T23 $-3
; JUMP label7
; LABEL label8
; STOREI 0 !T24
; STOREI !T24 $2
; UNLINK
; RET
str input "Please input an integer number: "
str space " "
str eol "\n"
var ret1
var i
var end
var result
push
jsr FUNC_id_main_L
sys halt
label FUNC_id_F_L
link 27
move 2 $-2
move $2 r0
move $-2 r1
cmpi r0 r1
jle label1
push r0
push r1
push r2
push r3
push ;(return value)
move 2 $-3
move $-3 r0
move $2 r1
subi r0 r1
move r1 $-4 ; - STORE_HANDLED
push $-4 ;using temp
jsr FUNC_id_F_L
pop
pop $-6 ;using temp
move $-6 r0
move r0 $-3
pop r3
pop r2
pop r1
pop r0
move $-3 r0
move r0 $-3
move $-3 r0
move r0 $-1
push r0
push r1
push r2
push r3
push ;(return value)
move 1 $-12
move $-12 r0
move $2 r1
subi r0 r1
move r1 $-13 ; - STORE_HANDLED
push $-13 ;using temp
jsr FUNC_id_F_L
pop
pop $-15 ;using temp
move $-15 r0
move r0 $-17
pop r3
pop r2
pop r1
pop r0
move $-17 r0
move r0 $-17
move $-17 r0
move $-1 r1
addi r0 r1
move r1 $-20 ; + STORE_HANDLED
move 1 $-21
move $-20 r0
move $-21 r1
addi r0 r1
move r1 $-22 ; + STORE_HANDLED
move $-22 r0
move r0 $3
unlnk
ret
jmp label2
label label1
move 0 $-24
move $2 r0
move $-24 r1
cmpi r0 r1
jne label3
move 0 $-25
move $-25 r0
move r0 $3
unlnk
ret
jmp label4
label label3
move 1 $-27
move $2 r0
move $-27 r1
cmpi r0 r1
jne label5
move 1 $-28
move $-28 r0
move r0 $3
unlnk
ret
jmp label6
label label5
move 1 $-30
move $-30 r0
move r0 $3
unlnk
ret
label label6
label label4
label label2
unlnk
ret
label FUNC_id_main_L
link 29
sys writes input
sys readi $-2
move 0 $-4
move $-4 r0
move r0 $-3
label label7
move $-2 r0
move r0 $-6
move $-3 r0
move $-6 r1
cmpi r0 r1
jeq label8
push r0
push r1
push r2
push r3
push ;(return value)
push $-3
jsr FUNC_id_F_L
pop
pop $-7 ;using temp
move $-7 r0
move r0 $-7
pop r3
pop r2
pop r1
pop r0
move $-7 r0
move r0 $-7
move $-7 r0
move r0 $-1
sys writei $-3
sys writes space
sys writei $-1
sys writes eol
move 1 $-13
move $-3 r0
move $-13 r1
addi r0 r1
move r1 $-14 ; + STORE_HANDLED
move $-14 r0
move r0 $-3
jmp label7
label label8
move 0 $-16
move $-16 r0
move r0 $2
unlnk
ret
