; PUSH SYMBOLSTRINGinput:="Please enter an integer number: ";STRINGeol:="\n";
; IR code
; PUSH SYMBOLINTret;INTtret;
;Print store: c 1 left: !T1
;RETURN: No Function;found: factorial(a-1)
;postfix2: !T3
;number rec before: 3
;number rec after: 4
;Key: !T3 call: factorial(a-1)
;left: tret right: factorial(a-1) true
;number before: 4 number after: 5
;=======================
;current register = !T4 current call factorial(a-1)
;Function name = factorial
;Function parameters = a-1
; Postfix: a 1 -
;-----------------------
;postfix2: tret*a
;number rec before: 7
;number rec after: 7
;Key: !T3 call: factorial(a-1)
;Key: !T4 call: factorial(a-1)
;left: ret right: tret*a true
;number before: 7 number after: 7
;only one function call with operation: or no function calltret*a
;tret a *
;Print store: c !T7 left: $-1
;RETURN: No Function; PUSH SYMBOLINTnum;INTresult;
;Print store: c 1 left: !T8
;postfix2: 1
;number rec before: 9
;number rec after: 9
;Key: !T3 call: factorial(a-1)
;Key: !T4 call: factorial(a-1)
;left: result right: 1 true
;number before: 9 number after: 9
;only one function call with operation: or no function call1
;1
;Print store: c 1 left: !T9
;Print store: c !T9 left: $-2
;Print store: c 1 left: !T10
;found: factorial(num)
;postfix2: !T11
;number rec before: 11
;number rec after: 12
;Key: !T11 call: factorial(num)
;Key: !T3 call: factorial(a-1)
;Key: !T4 call: factorial(a-1)
;left: result right: factorial(num) true
;number before: 12 number after: 13
;=======================
;current register = !T12 current call factorial(num)
;Function name = factorial
;Function parameters = num
; Postfix: num
;Error here: num
;-----------------------
;postfix2: 0
;number rec before: 13
;number rec after: 13
;Key: !T11 call: factorial(num)
;Key: !T12 call: factorial(num)
;Key: !T3 call: factorial(a-1)
;Key: !T4 call: factorial(a-1)
;left: result right: 0 true
;number before: 13 number after: 13
;only one function call with operation: or no function call0
;0
;Print store: c 0 left: !T13
;Print store: c !T13 left: $-2
;RETURN: No Function; PUSH
; JSR FUNC_id_main_L
; HALT
; LABEL FUNC_id_factorial_L
; LINK 3
; STOREI 1 !T1
; NE $2 !T1 label1
; STOREI 1 !T2
; STOREI !T2 $3
; UNLINK
; RET
; JUMP label2
; LABEL label1
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; STOREI 1 !T4
; SUBI $2 !T4 !T5
; PUSH !T5
; JSR FUNC_id_factorial_L
; POP
; POP !T6
; STOREI !T6 !T4
; POP r3
; POP r2
; POP r1
; POP r0
; STOREI !T4 !T4 ;snemo
; STOREI !T4 $-2
; MULTI $-2 $2 !T7
; STOREI !T7 $-1
; LABEL label2
; STOREI $-1 $3
; UNLINK
; RET
; LABEL FUNC_id_main_L
; LINK 3
; WRITES input
; READI $-1
; STOREI 1 !T8
; NE $-1 !T8 label3
; STOREI 1 !T9
; STOREI !T9 $-2
; JUMP label4
; LABEL label3
; STOREI 1 !T10
; LE $-1 !T10 label5
; PUSH r0
; PUSH r1
; PUSH r2
; PUSH r3
; PUSH ;(return value)
; PUSH $-1
; JSR FUNC_id_factorial_L
; POP
; POP !T12
; STOREI !T12 !T12
; POP r3
; POP r2
; POP r1
; POP r0
; STOREI !T12 !T12 ;snemo
; STOREI !T12 $-2
; JUMP label6
; LABEL label5
; STOREI 0 !T13
; STOREI !T13 $-2
; LABEL label6
; LABEL label4
; WRITEI $-2
; WRITES eol
; STOREI 0 !T14
; STOREI !T14 $2
; UNLINK
; RET
str input "Please enter an integer number: "
str eol "\n"
var ret
var tret
var num
var result
push
jsr FUNC_id_main_L
sys halt
label FUNC_id_factorial_L
link 18
move 1 $-3
move $2 r0
move $-3 r1
cmpi r0 r1
jne label1
move 1 $-4
move $-4 r0
move r0 $3
unlnk
ret
jmp label2
label label1
push r0
push r1
push r2
push r3
push ;(return value)
move 1 $-6
move $-6 r0
move $2 r1
subi r0 r1
move r1 $-7 ; - STORE_HANDLED
push $-7 ;using temp
jsr FUNC_id_factorial_L
pop
pop $-9 ;using temp
move $-9 r0
move r0 $-6
pop r3
pop r2
pop r1
pop r0
move $-6 r0
move r0 $-6
move $-6 r0
move r0 $-2
move $-2 r0
move $2 r1
muli r0 r1
move r1 $-15 ; * STORE_HANDLED
move $-15 r0
move r0 $-1
label label2
move $-1 r0
move r0 $3
unlnk
ret
label FUNC_id_main_L
link 18
sys writes input
sys readi $-1
move 1 $-3
move $-1 r0
move $-3 r1
cmpi r0 r1
jne label3
move 1 $-4
move $-4 r0
move r0 $-2
jmp label4
label label3
move 1 $-6
move $-1 r0
move $-6 r1
cmpi r0 r1
jle label5
push r0
push r1
push r2
push r3
push ;(return value)
push $-1
jsr FUNC_id_factorial_L
pop
pop $-7 ;using temp
move $-7 r0
move r0 $-7
pop r3
pop r2
pop r1
pop r0
move $-7 r0
move r0 $-7
move $-7 r0
move r0 $-2
jmp label6
label label5
move 0 $-13
move $-13 r0
move r0 $-2
label label6
label label4
sys writei $-2
sys writes eol
move 0 $-15
move $-15 r0
move r0 $2
unlnk
ret
