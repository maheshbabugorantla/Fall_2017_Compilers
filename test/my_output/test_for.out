; PUSH SYMBOLINTi,j;FLOATnewapprox,approx,num;STRINGeol:="\n";
; IR code
; PUSH SYMBOL
;postfix2: 1
;number rec before: 1
;number rec after: 1
;left: j right: 1 true
;number before: 1 number after: 1
;only one function call with operation: or no function call1
;1
;Print store: c 1 left: !T1
;Print store: c !T1 left: j
;postfix2: num
;number rec before: 2
;number rec after: 2
;left: approx right: num false
;number before: 2 number after: 2
;only one function call with operation: or no function callnum
;num
;Print store: c num left: approx
; PUSH SYMBOL
;Print store: c 100 left: !T2
;Print store: c !T2 left: i
;Print store: c 0 left: !T3
;postfix2: 0.5*(approx+num/approx)
;number rec before: 4
;number rec after: 4
;left: newapprox right: 0.5*(approx+num/approx) false
;number before: 4 number after: 4
;only one function call with operation: or no function call0.5*(approx+num/approx)
;0.5 approx num approx / + *
;Print store: c 0.5 left: !T4
;Print store: c !T7 left: newapprox
;postfix2: newapprox
;number rec before: 8
;number rec after: 8
;left: approx right: newapprox false
;number before: 8 number after: 8
;only one function call with operation: or no function callnewapprox
;newapprox
;Print store: c newapprox left: approx
;Print store: c !T9 left: i
; PUSH
; JSR FUNC_id_main_L
; HALT
; LABEL FUNC_id_main_L
; LINK 1
; READF num
; STOREI 1 !T1
; STOREI !T1 j
; STOREF num approx
; STOREI 100 !T2
; STOREI !T2 i
; LABEL label1
; STOREF 0 !T3
; EQ i !T3 label2
; STOREF 0.5 !T4
; DIVF num approx !T5
; ADDF approx !T5 !T6
; MULTF !T4 !T6 !T7
; STOREF !T7 newapprox
; STOREF newapprox approx
; STOREI 1 !T8
; SUBI i !T8 !T9
; STOREI !T9 i
; JUMP label1
; LABEL label2
; WRITEF approx
; WRITES eol
; UNLINK
; RET
var i
var j
var newapprox
var approx
var num
str eol "\n"
push
jsr FUNC_id_main_L
sys halt
label FUNC_id_main_L
link 11
sys readr num
move 1 $-1
move $-1 r0
move r0 j
move num r0
move r0 approx
move 100 $-3
move $-3 r0
move r0 i
label label1
move 0 $-5
move i r0
move $-5 r1
cmpi r0 r1
jeq label2
move 0.5 $-6
move approx r0
move num r1
divr r0 r1
move r1 $-7 ; / STORE_HANDLED
move approx r0
move $-7 r1
addr r0 r1
move r1 $-8 ; + STORE_HANDLED
move $-6 r0
move $-8 r1
mulr r0 r1
move r1 $-9 ; * STORE_HANDLED
move $-9 r0
move r0 newapprox
move newapprox r0
move r0 approx
move 1 $-11
move $-11 r0
move i r1
subi r0 r1
move r1 $-12 ; - STORE_HANDLED
move $-12 r0
move r0 i
jmp label1
label label2
sys writer approx
sys writes eol
unlnk
ret
