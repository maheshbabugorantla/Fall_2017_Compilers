; IR code
; PUSH
; JSR FUNC_id_main_L
; HALT
++++++++++++++++++++++++++++++++
FLOATa,FLOATb
key = b
name = b loc = ARGS func = add dec = FLOAT name = $3
key = a
name = a loc = ARGS func = add dec = FLOAT name = $2
{{{{{{{{{{{{{{{{{{{{{{{{{{
FLOATresult;
key = result
name = result loc = LOCALS func = add dec = FLOAT name = $-1
key = b
name = b loc = ARGS func = add dec = FLOAT name = $3
key = a
name = a loc = ARGS func = add dec = FLOAT name = $2
; LABEL FUNC_id_add_L
; LINK 2
;ADDF a b $T1
;STOREF  $T1 result
;STOREF  needs conversion here $4

; UNLINK
; RET
++++++++++++++++++++++++++++++++
FLOATa,FLOATb
key = result
name = result loc = LOCALS func = add dec = FLOAT name = $-1
key = b
name = b loc = ARGS func = multiply dec = FLOAT name = $3
key = a
name = a loc = ARGS func = multiply dec = FLOAT name = $2
{{{{{{{{{{{{{{{{{{{{{{{{{{
FLOATresult;
key = result
name = result loc = LOCALS func = multiply dec = FLOAT name = $-1
key = b
name = b loc = ARGS func = multiply dec = FLOAT name = $3
key = a
name = a loc = ARGS func = multiply dec = FLOAT name = $2
; LABEL FUNC_id_multiply_L
; LINK 2
;MULTF a b $T2
;STOREF  $T2 result
;STOREF  needs conversion here $4

; UNLINK
; RET
++++++++++++++++++++++++++++++++

key = result
name = result loc = LOCALS func = multiply dec = FLOAT name = $-1
key = b
name = b loc = ARGS func = multiply dec = FLOAT name = $3
key = a
name = a loc = ARGS func = multiply dec = FLOAT name = $2
{{{{{{{{{{{{{{{{{{{{{{{{{{
FLOATa,b,c;FLOATaddresult,multiplyresult;
key = result
name = result loc = LOCALS func = multiply dec = FLOAT name = $-1
key = multiplyresult
name = multiplyresult loc = LOCALS func = main dec = FLOAT name = $-5
key = b
name = b loc = LOCALS func = main dec = FLOAT name = $-2
key = c
name = c loc = LOCALS func = main dec = FLOAT name = $-3
key = a
name = a loc = LOCALS func = main dec = FLOAT name = $-1
key = addresult
name = addresult loc = LOCALS func = main dec = FLOAT name = $-4
; LABEL FUNC_id_main_L
; LINK 6
;WRITES intro
;WRITES first
;READF a
;WRITES second
;READF b
;WRITES third
;READF c
THIS IS A FUNCTION CALL = multiply(a,b)
==========
a,b
; PUSH (return value)
; PUSH arguments
; PUSH arguments
; JSR FUNC_id_multiply_L
; POP arguments
; POP arguments
; POP the value returned
THIS IS A FUNCTION CALL = add(multiplyresult,c)
==========
multiplyresult,c
; PUSH (return value)
; PUSH arguments
; PUSH arguments
; JSR FUNC_id_add_L
; POP arguments
; POP arguments
; POP the value returned
;WRITEF a
;WRITES star
;WRITEF b
;WRITES plus
;WRITEF c
;WRITES equal
;WRITEF addresult
;WRITES eol
;STOREF  needs conversion here $4

; UNLINK
; RET
;tiny code
str intro "You will be asked for three float numbers\n"
str first "Please enter the first float number: "
str second "Please enter the second float number: "
str third "Please enter the third float number: "
str eol "\n"
str star "*"
str plus "+"
str equal "="
label add
var result
move a r0
addr b r0
move r0 result
label multiply
var result
move a r1
mulr b r1
move r1 result
label main
var a
var b
var c
var addresult
var multiplyresult
sys writes intro
sys writes first
sys readr a
sys writes second
sys readr b
sys writes third
sys readr c
sys writer a
sys writes star
sys writer b
sys writes plus
sys writer c
sys writes equal
sys writer addresult
sys writes eol
sys halt
